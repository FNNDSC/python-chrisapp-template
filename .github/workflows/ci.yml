# Continuous integration testing for ChRIS Plugin.
# https://github.com/FNNDSC/python-chrisapp-template/wiki/Continuous-Integration
#
# - on push and PR: run pytest
# - on push to main: build and push container images as ":latest"
# - on push to semver tag: build and push container image with tag and
#                          upload plugin description to https://chrisstore.co

name: build

on:
  push:
    branches: [ main ]
    tags:
      - "v?[0-9]+.[0-9]+.[0-9]+*"
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit tests
    if: false  # delete this line to enable automatic testing
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v5
        with:
          build-args: extras_require=dev
          context: .
          load: true
          push: false
          tags: "localhost/local/app:dev"
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run pytest
        run: |
          docker run -v "$GITHUB_WORKSPACE:/app:ro" -w /app localhost/local/app:dev \
            pytest -o cache_dir=/tmp/pytest

  build:
    name: Build
    if: false  # delete this line and uncomment the line below to enable automatic builds
    # if: github.event_name == 'push' || github.event_name == 'release'
    # needs: [ test ]  # uncomment to require passing tests
    runs-on: ubuntu-22.04

    steps:
      - name: Decide image tags
        id: info
        shell: python
        run: |
          import os
          import itertools
          
          registries = ['docker.io', 'ghcr.io']
          repos = ['${{ github.repository }}']
          if '${{ github.ref_type }}' == 'branch':
              tags = ['latest']
          elif '${{ github.ref_type }}' == 'tag':
              tag = '${{ github.ref_name }}'
              version = tag[1:] if tag.startswith('v') else tag
              tags = ['latest', version]
          else:
              tags = []

          def join_tag(t):
              registry, repo, tag = t
              return f'{registry}/{repo}:{tag}'.lower()

          product = itertools.product(registries, repos, tags)
          tags_csv = ','.join(map(join_tag, product))
          outputs = {
              'tags_csv' : tags_csv,
              'push'     : 'true' if tags_csv else 'false',
              'local_tag': join_tag(('localhost', '${{ github.repository }}', 'latest'))
          }
          with open(os.environ['GITHUB_OUTPUT'], 'a') as out:
              for k, v in outputs.items():
                  out.write(f'{k}={v}\n')

      - uses: actions/checkout@v3
        # QEMU is used for non-x86_64 builds
      - uses: docker/setup-qemu-action@v3
        # buildx adds additional features to docker build
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

        # Here, we want to do the docker build twice:
        # The first build pushes to our local registry for testing.
        # The second build pushes to Docker Hub and ghcr.io 
      - name: Build (local only)
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.info.outputs.local_tag }}
          load: true
          cache-from: type=gha
      # If you have a directory called examples/incoming/ and examples/outgoing/, then
      # run your ChRIS plugin with no parameters, and assert that it creates all the files
      # which are expected. File contents are not compared.
      - name: Run examples
        id: run_examples
        run: |
          if ! [ -d 'examples/incoming/' ] || ! [ -d 'examples/outgoing/' ]; then
            echo "No examples."
            exit 0
          fi
        
          dock_image=${{ steps.info.outputs.local_tag }}
          output_dir=$(mktemp -d)
          cmd=$(docker image inspect -f '{{ (index .Config.Cmd 0) }}' $dock_image)
          docker run --rm -u "$(id -u):$(id -g)" \
            -v "$PWD/examples/incoming:/incoming:ro" \
            -v "$output_dir:/outgoing:rw" \
            $dock_image $cmd /incoming /outgoing
          
          for expected_file in $(find examples/outgoing -type f); do
            fname="${expected_file##*/}"
            out_path="$output_dir/$fname"
            printf "Checking output %s exists..." "$out_path"
            if [ -f "$out_path" ]; then
              echo "ok"
            else
              echo "not found"
              exit 1
            fi
          done

      - name: Login to DockerHub
        if: (github.event_name == 'push' || github.event_name == 'release') && contains(steps.info.outputs.tags_csv, 'docker.io')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        if: (github.event_name == 'push' || github.event_name == 'release') && contains(steps.info.outputs.tags_csv, 'ghcr.io')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        if: (github.event_name == 'push' || github.event_name == 'release')
        with:
          context: .
          file: ./Dockerfile
          tags: ${{ steps.info.outputs.tags_csv }}
          # if non-x86_84 architectures are supported, add them here
          platforms: linux/amd64  #,linux/arm64,linux/ppc64le
          push: ${{ steps.info.outputs.push }}
          cache-to: type=gha,mode=max

      - name: Upload ChRIS Plugin
        id: upload
        if: github.ref_type == 'tag'
        uses: FNNDSC/upload-chris-plugin@v1
        with:
          dock_image: ${{ steps.info.outputs.local_tag }}
          username: ${{ secrets.CHRISPROJECT_USERNAME }}
          password: ${{ secrets.CHRISPROJECT_PASSWORD }}
          chris_url: https://cube.chrisproject.org/api/v1/
          compute_names: host,galena

      - name: Update DockerHub description
        if: steps.upload.outcome == 'success'
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true  # it is not crucial that this works
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          short-description: ${{ steps.upload.outputs.title }}
          readme-filepath: ./README.md
